---

# Check pre-requisites
- import_tasks: pre-requisites.yml

# Commission block
- block:
  # Cluster: A logical grouping of container instances that you can place tasks on
  - name: "AWS | ECS | Provision the cluster"
    ecs_cluster:
      name: "{{ ecs_cluster_name }}"
      state: present
    register: ecs_cluster

  - debug: var=ecs_cluster verbosity=3

  # IAM role for permissions on EC2 instances
  - name: "AWS | IAM | Create IAM role needed for cluster EC2 instances access to AWS EC2 services"
    iam_role:
      name: "{{ ecs_instance_iam_role }}"
      description: "Role for EC2 instances that are part of EC2 clusters"
      assume_role_policy_document: "{{ lookup('file', 'iam_trust_policy.json')  }}"
      managed_policy:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      state: present
    register: iam_machine_role

  - debug: var=iam_machine_role verbosity=3

  # Add CloudWatch policy to IAM role, as we create new LogGroups from the instance, see awslog config setup through user_data
  - name: "AWS | IAM | Attach IAM inline policy to IAM role to also create LogGroups on CloudWatch"
    iam_policy:
      iam_type: role
      iam_name: "{{ iam_machine_role.iam_role.role_name }}"
      policy_name: "cloudwatch_create_log_group"
      policy_json: '{"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup"], "Resource": "*"}]}'
      state: present

  # Container Instances: Define a EC2 Launch Configuration to create EC2 instances that run the ECS agent, then ensure
  # they are registered into the ECS cluster
  - name: "AWS | EC2 | Define a EC2 Launch Configuration for ECS use"
    ec2_lc:
      name: "{{ ecs_launch_configuration_name }}"
      image_id: "{{ ecs_ami_id }}"
      key_name: "{{ ecs_ssh_key_name }}"
      security_groups: "{{ ecs_security_groups }}"
      instance_type: "{{ ecs_instance_type }}"
      instance_monitoring: "{{ ecs_instance_monitoring }}"
      instance_profile_name: "{{ ecs_instance_iam_role }}"
      assign_public_ip: "{{ ecs_assign_public_ip }}"
      user_data: "{{ ecs_userdata }}"
      region: "{{ ecs_ec2_region }}"
      state: present
    register: ec2_lc

  - debug: var=ec2_lc verbosity=3

  # Container Instances: Define an Auto Scaling Group to manage creating/terminating EC2 instances
  - name: "AWS | EC2 | Define a EC2 Auto Scaling Group for ECS use"
    ec2_asg:
      name: "{{ ecs_asg_name }}"
      health_check_period: "{{ ecs_asg_health_check_period }}"
      health_check_type: "{{ ecs_asg_health_type }}"
      default_cooldown: "{{ ecs_asg_default_cooldown }}"
      replace_all_instances: "{{ ecs_asg_replace_all_instances }}"
      launch_config_name: "{{ ec2_lc.name }}"
      min_size: "{{ ecs_asg_min_size }}"
      max_size: "{{ ecs_asg_max_size }}"
      desired_capacity: "{{ ecs_asg_desired_capacity }}"
      vpc_zone_identifier: "{{ ecs_vpc_subnets }}"
      tags: "{{ ecs_ec2_tags }}"
      wait_for_instances: true
      region: "{{ ecs_ec2_region }}"
      state: present
    register: ec2_asg

  - debug: var=ec2_asg verbosity=3

  when: ecs_state == "present"

# Decommission block
- block:
  # Decommision the EC2 Auto Scaling Group
  - name: "AWS | EC2 | Decomission the EC2 Auto Scaling Group"
    ec2_asg:
      name: "{{ ecs_asg_name }}"
      state: absent
      wait_for_instances: "{{ ec2_asg_wait }}"

  # Decommision the EC2 Launch Configuration
  - name: "AWS | EC2 | Decomission the EC2 Launch Configuration"
    ec2_lc:
      name: "{{ ecs_launch_configuration_name }}"
      state: absent

  # Decommision the IAM role
  - name: "AWS | IAM | Create IAM role needed for cluster EC2 instances access to AWS EC2 services"
    iam_role:
      name: "{{ ecs_instance_iam_role }}"
      state: absent

  # Decomission the ECS cluster
  - name: "AWS | ECS | Decommission the cluster"
    ecs_cluster:
      name: "{{ ecs_cluster_name }}"
      state: absent

  when: ecs_state == "absent"
